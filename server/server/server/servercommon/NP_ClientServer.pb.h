// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NP_ClientServer.proto

#ifndef PROTOBUF_NP_5fClientServer_2eproto__INCLUDED
#define PROTOBUF_NP_5fClientServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace net_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NP_5fClientServer_2eproto();
void protobuf_AssignDesc_NP_5fClientServer_2eproto();
void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

class C2SRegister;
class C2SLogin;
class C2SPlatformLogin;
class C2SBingPhoneNumber;
class C2SSendSMSCodeToPlayer;
class C2SEnterGame;
class C2SHeartBeat;

// ===================================================================

class C2SRegister : public ::google::protobuf::Message {
 public:
  C2SRegister();
  virtual ~C2SRegister();

  C2SRegister(const C2SRegister& from);

  inline C2SRegister& operator=(const C2SRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SRegister& default_instance();

  void Swap(C2SRegister* other);

  // implements Message ----------------------------------------------

  C2SRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SRegister& from);
  void MergeFrom(const C2SRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string line_no = 1;
  inline bool has_line_no() const;
  inline void clear_line_no();
  static const int kLineNoFieldNumber = 1;
  inline const ::std::string& line_no() const;
  inline void set_line_no(const ::std::string& value);
  inline void set_line_no(const char* value);
  inline void set_line_no(const char* value, size_t size);
  inline ::std::string* mutable_line_no();
  inline ::std::string* release_line_no();
  inline void set_allocated_line_no(::std::string* line_no);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SRegister)
 private:
  inline void set_has_line_no();
  inline void clear_has_line_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* line_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SRegister* default_instance_;
};
// -------------------------------------------------------------------

class C2SLogin : public ::google::protobuf::Message {
 public:
  C2SLogin();
  virtual ~C2SLogin();

  C2SLogin(const C2SLogin& from);

  inline C2SLogin& operator=(const C2SLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SLogin& default_instance();

  void Swap(C2SLogin* other);

  // implements Message ----------------------------------------------

  C2SLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SLogin& from);
  void MergeFrom(const C2SLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string init_user_name = 1;
  inline bool has_init_user_name() const;
  inline void clear_init_user_name();
  static const int kInitUserNameFieldNumber = 1;
  inline const ::std::string& init_user_name() const;
  inline void set_init_user_name(const ::std::string& value);
  inline void set_init_user_name(const char* value);
  inline void set_init_user_name(const char* value, size_t size);
  inline ::std::string* mutable_init_user_name();
  inline ::std::string* release_init_user_name();
  inline void set_allocated_init_user_name(::std::string* init_user_name);

  // required string user_pwd = 2;
  inline bool has_user_pwd() const;
  inline void clear_user_pwd();
  static const int kUserPwdFieldNumber = 2;
  inline const ::std::string& user_pwd() const;
  inline void set_user_pwd(const ::std::string& value);
  inline void set_user_pwd(const char* value);
  inline void set_user_pwd(const char* value, size_t size);
  inline ::std::string* mutable_user_pwd();
  inline ::std::string* release_user_pwd();
  inline void set_allocated_user_pwd(::std::string* user_pwd);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SLogin)
 private:
  inline void set_has_init_user_name();
  inline void clear_has_init_user_name();
  inline void set_has_user_pwd();
  inline void clear_has_user_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* init_user_name_;
  ::std::string* user_pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SLogin* default_instance_;
};
// -------------------------------------------------------------------

class C2SPlatformLogin : public ::google::protobuf::Message {
 public:
  C2SPlatformLogin();
  virtual ~C2SPlatformLogin();

  C2SPlatformLogin(const C2SPlatformLogin& from);

  inline C2SPlatformLogin& operator=(const C2SPlatformLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SPlatformLogin& default_instance();

  void Swap(C2SPlatformLogin* other);

  // implements Message ----------------------------------------------

  C2SPlatformLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SPlatformLogin& from);
  void MergeFrom(const C2SPlatformLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string line_no = 1;
  inline bool has_line_no() const;
  inline void clear_line_no();
  static const int kLineNoFieldNumber = 1;
  inline const ::std::string& line_no() const;
  inline void set_line_no(const ::std::string& value);
  inline void set_line_no(const char* value);
  inline void set_line_no(const char* value, size_t size);
  inline ::std::string* mutable_line_no();
  inline ::std::string* release_line_no();
  inline void set_allocated_line_no(::std::string* line_no);

  // required string init_user_name = 2;
  inline bool has_init_user_name() const;
  inline void clear_init_user_name();
  static const int kInitUserNameFieldNumber = 2;
  inline const ::std::string& init_user_name() const;
  inline void set_init_user_name(const ::std::string& value);
  inline void set_init_user_name(const char* value);
  inline void set_init_user_name(const char* value, size_t size);
  inline ::std::string* mutable_init_user_name();
  inline ::std::string* release_init_user_name();
  inline void set_allocated_init_user_name(::std::string* init_user_name);

  // optional string verify_param = 3;
  inline bool has_verify_param() const;
  inline void clear_verify_param();
  static const int kVerifyParamFieldNumber = 3;
  inline const ::std::string& verify_param() const;
  inline void set_verify_param(const ::std::string& value);
  inline void set_verify_param(const char* value);
  inline void set_verify_param(const char* value, size_t size);
  inline ::std::string* mutable_verify_param();
  inline ::std::string* release_verify_param();
  inline void set_allocated_verify_param(::std::string* verify_param);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SPlatformLogin)
 private:
  inline void set_has_line_no();
  inline void clear_has_line_no();
  inline void set_has_init_user_name();
  inline void clear_has_init_user_name();
  inline void set_has_verify_param();
  inline void clear_has_verify_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* line_no_;
  ::std::string* init_user_name_;
  ::std::string* verify_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SPlatformLogin* default_instance_;
};
// -------------------------------------------------------------------

class C2SBingPhoneNumber : public ::google::protobuf::Message {
 public:
  C2SBingPhoneNumber();
  virtual ~C2SBingPhoneNumber();

  C2SBingPhoneNumber(const C2SBingPhoneNumber& from);

  inline C2SBingPhoneNumber& operator=(const C2SBingPhoneNumber& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SBingPhoneNumber& default_instance();

  void Swap(C2SBingPhoneNumber* other);

  // implements Message ----------------------------------------------

  C2SBingPhoneNumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SBingPhoneNumber& from);
  void MergeFrom(const C2SBingPhoneNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_code = 1;
  inline bool has_user_code() const;
  inline void clear_user_code();
  static const int kUserCodeFieldNumber = 1;
  inline const ::std::string& user_code() const;
  inline void set_user_code(const ::std::string& value);
  inline void set_user_code(const char* value);
  inline void set_user_code(const char* value, size_t size);
  inline ::std::string* mutable_user_code();
  inline ::std::string* release_user_code();
  inline void set_allocated_user_code(::std::string* user_code);

  // required string phone_number = 2;
  inline bool has_phone_number() const;
  inline void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 2;
  inline const ::std::string& phone_number() const;
  inline void set_phone_number(const ::std::string& value);
  inline void set_phone_number(const char* value);
  inline void set_phone_number(const char* value, size_t size);
  inline ::std::string* mutable_phone_number();
  inline ::std::string* release_phone_number();
  inline void set_allocated_phone_number(::std::string* phone_number);

  // required string sms_code = 3;
  inline bool has_sms_code() const;
  inline void clear_sms_code();
  static const int kSmsCodeFieldNumber = 3;
  inline const ::std::string& sms_code() const;
  inline void set_sms_code(const ::std::string& value);
  inline void set_sms_code(const char* value);
  inline void set_sms_code(const char* value, size_t size);
  inline ::std::string* mutable_sms_code();
  inline ::std::string* release_sms_code();
  inline void set_allocated_sms_code(::std::string* sms_code);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SBingPhoneNumber)
 private:
  inline void set_has_user_code();
  inline void clear_has_user_code();
  inline void set_has_phone_number();
  inline void clear_has_phone_number();
  inline void set_has_sms_code();
  inline void clear_has_sms_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_code_;
  ::std::string* phone_number_;
  ::std::string* sms_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SBingPhoneNumber* default_instance_;
};
// -------------------------------------------------------------------

class C2SSendSMSCodeToPlayer : public ::google::protobuf::Message {
 public:
  C2SSendSMSCodeToPlayer();
  virtual ~C2SSendSMSCodeToPlayer();

  C2SSendSMSCodeToPlayer(const C2SSendSMSCodeToPlayer& from);

  inline C2SSendSMSCodeToPlayer& operator=(const C2SSendSMSCodeToPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SSendSMSCodeToPlayer& default_instance();

  void Swap(C2SSendSMSCodeToPlayer* other);

  // implements Message ----------------------------------------------

  C2SSendSMSCodeToPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SSendSMSCodeToPlayer& from);
  void MergeFrom(const C2SSendSMSCodeToPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string phone_number = 1;
  inline bool has_phone_number() const;
  inline void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 1;
  inline const ::std::string& phone_number() const;
  inline void set_phone_number(const ::std::string& value);
  inline void set_phone_number(const char* value);
  inline void set_phone_number(const char* value, size_t size);
  inline ::std::string* mutable_phone_number();
  inline ::std::string* release_phone_number();
  inline void set_allocated_phone_number(::std::string* phone_number);

  // required string code_type = 2;
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 2;
  inline const ::std::string& code_type() const;
  inline void set_code_type(const ::std::string& value);
  inline void set_code_type(const char* value);
  inline void set_code_type(const char* value, size_t size);
  inline ::std::string* mutable_code_type();
  inline ::std::string* release_code_type();
  inline void set_allocated_code_type(::std::string* code_type);

  // required string selfparams = 3;
  inline bool has_selfparams() const;
  inline void clear_selfparams();
  static const int kSelfparamsFieldNumber = 3;
  inline const ::std::string& selfparams() const;
  inline void set_selfparams(const ::std::string& value);
  inline void set_selfparams(const char* value);
  inline void set_selfparams(const char* value, size_t size);
  inline ::std::string* mutable_selfparams();
  inline ::std::string* release_selfparams();
  inline void set_allocated_selfparams(::std::string* selfparams);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SSendSMSCodeToPlayer)
 private:
  inline void set_has_phone_number();
  inline void clear_has_phone_number();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_selfparams();
  inline void clear_has_selfparams();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phone_number_;
  ::std::string* code_type_;
  ::std::string* selfparams_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SSendSMSCodeToPlayer* default_instance_;
};
// -------------------------------------------------------------------

class C2SEnterGame : public ::google::protobuf::Message {
 public:
  C2SEnterGame();
  virtual ~C2SEnterGame();

  C2SEnterGame(const C2SEnterGame& from);

  inline C2SEnterGame& operator=(const C2SEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SEnterGame& default_instance();

  void Swap(C2SEnterGame* other);

  // implements Message ----------------------------------------------

  C2SEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SEnterGame& from);
  void MergeFrom(const C2SEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string init_user_name = 1;
  inline bool has_init_user_name() const;
  inline void clear_init_user_name();
  static const int kInitUserNameFieldNumber = 1;
  inline const ::std::string& init_user_name() const;
  inline void set_init_user_name(const ::std::string& value);
  inline void set_init_user_name(const char* value);
  inline void set_init_user_name(const char* value, size_t size);
  inline ::std::string* mutable_init_user_name();
  inline ::std::string* release_init_user_name();
  inline void set_allocated_init_user_name(::std::string* init_user_name);

  // required string user_pwd = 2;
  inline bool has_user_pwd() const;
  inline void clear_user_pwd();
  static const int kUserPwdFieldNumber = 2;
  inline const ::std::string& user_pwd() const;
  inline void set_user_pwd(const ::std::string& value);
  inline void set_user_pwd(const char* value);
  inline void set_user_pwd(const char* value, size_t size);
  inline ::std::string* mutable_user_pwd();
  inline ::std::string* release_user_pwd();
  inline void set_allocated_user_pwd(::std::string* user_pwd);

  // @@protoc_insertion_point(class_scope:net_protocol.C2SEnterGame)
 private:
  inline void set_has_init_user_name();
  inline void clear_has_init_user_name();
  inline void set_has_user_pwd();
  inline void clear_has_user_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* init_user_name_;
  ::std::string* user_pwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class C2SHeartBeat : public ::google::protobuf::Message {
 public:
  C2SHeartBeat();
  virtual ~C2SHeartBeat();

  C2SHeartBeat(const C2SHeartBeat& from);

  inline C2SHeartBeat& operator=(const C2SHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SHeartBeat& default_instance();

  void Swap(C2SHeartBeat* other);

  // implements Message ----------------------------------------------

  C2SHeartBeat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2SHeartBeat& from);
  void MergeFrom(const C2SHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:net_protocol.C2SHeartBeat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_NP_5fClientServer_2eproto();
  friend void protobuf_AssignDesc_NP_5fClientServer_2eproto();
  friend void protobuf_ShutdownFile_NP_5fClientServer_2eproto();

  void InitAsDefaultInstance();
  static C2SHeartBeat* default_instance_;
};
// ===================================================================


// ===================================================================

// C2SRegister

// required string line_no = 1;
inline bool C2SRegister::has_line_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SRegister::set_has_line_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SRegister::clear_has_line_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SRegister::clear_line_no() {
  if (line_no_ != &::google::protobuf::internal::kEmptyString) {
    line_no_->clear();
  }
  clear_has_line_no();
}
inline const ::std::string& C2SRegister::line_no() const {
  return *line_no_;
}
inline void C2SRegister::set_line_no(const ::std::string& value) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(value);
}
inline void C2SRegister::set_line_no(const char* value) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(value);
}
inline void C2SRegister::set_line_no(const char* value, size_t size) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SRegister::mutable_line_no() {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  return line_no_;
}
inline ::std::string* C2SRegister::release_line_no() {
  clear_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_no_;
    line_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SRegister::set_allocated_line_no(::std::string* line_no) {
  if (line_no_ != &::google::protobuf::internal::kEmptyString) {
    delete line_no_;
  }
  if (line_no) {
    set_has_line_no();
    line_no_ = line_no;
  } else {
    clear_has_line_no();
    line_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SLogin

// required string init_user_name = 1;
inline bool C2SLogin::has_init_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SLogin::set_has_init_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SLogin::clear_has_init_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SLogin::clear_init_user_name() {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    init_user_name_->clear();
  }
  clear_has_init_user_name();
}
inline const ::std::string& C2SLogin::init_user_name() const {
  return *init_user_name_;
}
inline void C2SLogin::set_init_user_name(const ::std::string& value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SLogin::set_init_user_name(const char* value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SLogin::set_init_user_name(const char* value, size_t size) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SLogin::mutable_init_user_name() {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  return init_user_name_;
}
inline ::std::string* C2SLogin::release_init_user_name() {
  clear_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = init_user_name_;
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SLogin::set_allocated_init_user_name(::std::string* init_user_name) {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete init_user_name_;
  }
  if (init_user_name) {
    set_has_init_user_name();
    init_user_name_ = init_user_name;
  } else {
    clear_has_init_user_name();
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string user_pwd = 2;
inline bool C2SLogin::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SLogin::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SLogin::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SLogin::clear_user_pwd() {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    user_pwd_->clear();
  }
  clear_has_user_pwd();
}
inline const ::std::string& C2SLogin::user_pwd() const {
  return *user_pwd_;
}
inline void C2SLogin::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void C2SLogin::set_user_pwd(const char* value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void C2SLogin::set_user_pwd(const char* value, size_t size) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SLogin::mutable_user_pwd() {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  return user_pwd_;
}
inline ::std::string* C2SLogin::release_user_pwd() {
  clear_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_pwd_;
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SLogin::set_allocated_user_pwd(::std::string* user_pwd) {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pwd_;
  }
  if (user_pwd) {
    set_has_user_pwd();
    user_pwd_ = user_pwd;
  } else {
    clear_has_user_pwd();
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SPlatformLogin

// required string line_no = 1;
inline bool C2SPlatformLogin::has_line_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SPlatformLogin::set_has_line_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SPlatformLogin::clear_has_line_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SPlatformLogin::clear_line_no() {
  if (line_no_ != &::google::protobuf::internal::kEmptyString) {
    line_no_->clear();
  }
  clear_has_line_no();
}
inline const ::std::string& C2SPlatformLogin::line_no() const {
  return *line_no_;
}
inline void C2SPlatformLogin::set_line_no(const ::std::string& value) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(value);
}
inline void C2SPlatformLogin::set_line_no(const char* value) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(value);
}
inline void C2SPlatformLogin::set_line_no(const char* value, size_t size) {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  line_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SPlatformLogin::mutable_line_no() {
  set_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    line_no_ = new ::std::string;
  }
  return line_no_;
}
inline ::std::string* C2SPlatformLogin::release_line_no() {
  clear_has_line_no();
  if (line_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = line_no_;
    line_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SPlatformLogin::set_allocated_line_no(::std::string* line_no) {
  if (line_no_ != &::google::protobuf::internal::kEmptyString) {
    delete line_no_;
  }
  if (line_no) {
    set_has_line_no();
    line_no_ = line_no;
  } else {
    clear_has_line_no();
    line_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string init_user_name = 2;
inline bool C2SPlatformLogin::has_init_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SPlatformLogin::set_has_init_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SPlatformLogin::clear_has_init_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SPlatformLogin::clear_init_user_name() {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    init_user_name_->clear();
  }
  clear_has_init_user_name();
}
inline const ::std::string& C2SPlatformLogin::init_user_name() const {
  return *init_user_name_;
}
inline void C2SPlatformLogin::set_init_user_name(const ::std::string& value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SPlatformLogin::set_init_user_name(const char* value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SPlatformLogin::set_init_user_name(const char* value, size_t size) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SPlatformLogin::mutable_init_user_name() {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  return init_user_name_;
}
inline ::std::string* C2SPlatformLogin::release_init_user_name() {
  clear_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = init_user_name_;
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SPlatformLogin::set_allocated_init_user_name(::std::string* init_user_name) {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete init_user_name_;
  }
  if (init_user_name) {
    set_has_init_user_name();
    init_user_name_ = init_user_name;
  } else {
    clear_has_init_user_name();
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string verify_param = 3;
inline bool C2SPlatformLogin::has_verify_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2SPlatformLogin::set_has_verify_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2SPlatformLogin::clear_has_verify_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2SPlatformLogin::clear_verify_param() {
  if (verify_param_ != &::google::protobuf::internal::kEmptyString) {
    verify_param_->clear();
  }
  clear_has_verify_param();
}
inline const ::std::string& C2SPlatformLogin::verify_param() const {
  return *verify_param_;
}
inline void C2SPlatformLogin::set_verify_param(const ::std::string& value) {
  set_has_verify_param();
  if (verify_param_ == &::google::protobuf::internal::kEmptyString) {
    verify_param_ = new ::std::string;
  }
  verify_param_->assign(value);
}
inline void C2SPlatformLogin::set_verify_param(const char* value) {
  set_has_verify_param();
  if (verify_param_ == &::google::protobuf::internal::kEmptyString) {
    verify_param_ = new ::std::string;
  }
  verify_param_->assign(value);
}
inline void C2SPlatformLogin::set_verify_param(const char* value, size_t size) {
  set_has_verify_param();
  if (verify_param_ == &::google::protobuf::internal::kEmptyString) {
    verify_param_ = new ::std::string;
  }
  verify_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SPlatformLogin::mutable_verify_param() {
  set_has_verify_param();
  if (verify_param_ == &::google::protobuf::internal::kEmptyString) {
    verify_param_ = new ::std::string;
  }
  return verify_param_;
}
inline ::std::string* C2SPlatformLogin::release_verify_param() {
  clear_has_verify_param();
  if (verify_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verify_param_;
    verify_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SPlatformLogin::set_allocated_verify_param(::std::string* verify_param) {
  if (verify_param_ != &::google::protobuf::internal::kEmptyString) {
    delete verify_param_;
  }
  if (verify_param) {
    set_has_verify_param();
    verify_param_ = verify_param;
  } else {
    clear_has_verify_param();
    verify_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SBingPhoneNumber

// required string user_code = 1;
inline bool C2SBingPhoneNumber::has_user_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SBingPhoneNumber::set_has_user_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SBingPhoneNumber::clear_has_user_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SBingPhoneNumber::clear_user_code() {
  if (user_code_ != &::google::protobuf::internal::kEmptyString) {
    user_code_->clear();
  }
  clear_has_user_code();
}
inline const ::std::string& C2SBingPhoneNumber::user_code() const {
  return *user_code_;
}
inline void C2SBingPhoneNumber::set_user_code(const ::std::string& value) {
  set_has_user_code();
  if (user_code_ == &::google::protobuf::internal::kEmptyString) {
    user_code_ = new ::std::string;
  }
  user_code_->assign(value);
}
inline void C2SBingPhoneNumber::set_user_code(const char* value) {
  set_has_user_code();
  if (user_code_ == &::google::protobuf::internal::kEmptyString) {
    user_code_ = new ::std::string;
  }
  user_code_->assign(value);
}
inline void C2SBingPhoneNumber::set_user_code(const char* value, size_t size) {
  set_has_user_code();
  if (user_code_ == &::google::protobuf::internal::kEmptyString) {
    user_code_ = new ::std::string;
  }
  user_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SBingPhoneNumber::mutable_user_code() {
  set_has_user_code();
  if (user_code_ == &::google::protobuf::internal::kEmptyString) {
    user_code_ = new ::std::string;
  }
  return user_code_;
}
inline ::std::string* C2SBingPhoneNumber::release_user_code() {
  clear_has_user_code();
  if (user_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_code_;
    user_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SBingPhoneNumber::set_allocated_user_code(::std::string* user_code) {
  if (user_code_ != &::google::protobuf::internal::kEmptyString) {
    delete user_code_;
  }
  if (user_code) {
    set_has_user_code();
    user_code_ = user_code;
  } else {
    clear_has_user_code();
    user_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phone_number = 2;
inline bool C2SBingPhoneNumber::has_phone_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SBingPhoneNumber::set_has_phone_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SBingPhoneNumber::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SBingPhoneNumber::clear_phone_number() {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    phone_number_->clear();
  }
  clear_has_phone_number();
}
inline const ::std::string& C2SBingPhoneNumber::phone_number() const {
  return *phone_number_;
}
inline void C2SBingPhoneNumber::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void C2SBingPhoneNumber::set_phone_number(const char* value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void C2SBingPhoneNumber::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SBingPhoneNumber::mutable_phone_number() {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  return phone_number_;
}
inline ::std::string* C2SBingPhoneNumber::release_phone_number() {
  clear_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_number_;
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SBingPhoneNumber::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (phone_number) {
    set_has_phone_number();
    phone_number_ = phone_number;
  } else {
    clear_has_phone_number();
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sms_code = 3;
inline bool C2SBingPhoneNumber::has_sms_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2SBingPhoneNumber::set_has_sms_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2SBingPhoneNumber::clear_has_sms_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2SBingPhoneNumber::clear_sms_code() {
  if (sms_code_ != &::google::protobuf::internal::kEmptyString) {
    sms_code_->clear();
  }
  clear_has_sms_code();
}
inline const ::std::string& C2SBingPhoneNumber::sms_code() const {
  return *sms_code_;
}
inline void C2SBingPhoneNumber::set_sms_code(const ::std::string& value) {
  set_has_sms_code();
  if (sms_code_ == &::google::protobuf::internal::kEmptyString) {
    sms_code_ = new ::std::string;
  }
  sms_code_->assign(value);
}
inline void C2SBingPhoneNumber::set_sms_code(const char* value) {
  set_has_sms_code();
  if (sms_code_ == &::google::protobuf::internal::kEmptyString) {
    sms_code_ = new ::std::string;
  }
  sms_code_->assign(value);
}
inline void C2SBingPhoneNumber::set_sms_code(const char* value, size_t size) {
  set_has_sms_code();
  if (sms_code_ == &::google::protobuf::internal::kEmptyString) {
    sms_code_ = new ::std::string;
  }
  sms_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SBingPhoneNumber::mutable_sms_code() {
  set_has_sms_code();
  if (sms_code_ == &::google::protobuf::internal::kEmptyString) {
    sms_code_ = new ::std::string;
  }
  return sms_code_;
}
inline ::std::string* C2SBingPhoneNumber::release_sms_code() {
  clear_has_sms_code();
  if (sms_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sms_code_;
    sms_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SBingPhoneNumber::set_allocated_sms_code(::std::string* sms_code) {
  if (sms_code_ != &::google::protobuf::internal::kEmptyString) {
    delete sms_code_;
  }
  if (sms_code) {
    set_has_sms_code();
    sms_code_ = sms_code;
  } else {
    clear_has_sms_code();
    sms_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SSendSMSCodeToPlayer

// required string phone_number = 1;
inline bool C2SSendSMSCodeToPlayer::has_phone_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SSendSMSCodeToPlayer::set_has_phone_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SSendSMSCodeToPlayer::clear_has_phone_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SSendSMSCodeToPlayer::clear_phone_number() {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    phone_number_->clear();
  }
  clear_has_phone_number();
}
inline const ::std::string& C2SSendSMSCodeToPlayer::phone_number() const {
  return *phone_number_;
}
inline void C2SSendSMSCodeToPlayer::set_phone_number(const ::std::string& value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_phone_number(const char* value) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_phone_number(const char* value, size_t size) {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  phone_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SSendSMSCodeToPlayer::mutable_phone_number() {
  set_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    phone_number_ = new ::std::string;
  }
  return phone_number_;
}
inline ::std::string* C2SSendSMSCodeToPlayer::release_phone_number() {
  clear_has_phone_number();
  if (phone_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_number_;
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SSendSMSCodeToPlayer::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_number_;
  }
  if (phone_number) {
    set_has_phone_number();
    phone_number_ = phone_number;
  } else {
    clear_has_phone_number();
    phone_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string code_type = 2;
inline bool C2SSendSMSCodeToPlayer::has_code_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SSendSMSCodeToPlayer::set_has_code_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SSendSMSCodeToPlayer::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SSendSMSCodeToPlayer::clear_code_type() {
  if (code_type_ != &::google::protobuf::internal::kEmptyString) {
    code_type_->clear();
  }
  clear_has_code_type();
}
inline const ::std::string& C2SSendSMSCodeToPlayer::code_type() const {
  return *code_type_;
}
inline void C2SSendSMSCodeToPlayer::set_code_type(const ::std::string& value) {
  set_has_code_type();
  if (code_type_ == &::google::protobuf::internal::kEmptyString) {
    code_type_ = new ::std::string;
  }
  code_type_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_code_type(const char* value) {
  set_has_code_type();
  if (code_type_ == &::google::protobuf::internal::kEmptyString) {
    code_type_ = new ::std::string;
  }
  code_type_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_code_type(const char* value, size_t size) {
  set_has_code_type();
  if (code_type_ == &::google::protobuf::internal::kEmptyString) {
    code_type_ = new ::std::string;
  }
  code_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SSendSMSCodeToPlayer::mutable_code_type() {
  set_has_code_type();
  if (code_type_ == &::google::protobuf::internal::kEmptyString) {
    code_type_ = new ::std::string;
  }
  return code_type_;
}
inline ::std::string* C2SSendSMSCodeToPlayer::release_code_type() {
  clear_has_code_type();
  if (code_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_type_;
    code_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SSendSMSCodeToPlayer::set_allocated_code_type(::std::string* code_type) {
  if (code_type_ != &::google::protobuf::internal::kEmptyString) {
    delete code_type_;
  }
  if (code_type) {
    set_has_code_type();
    code_type_ = code_type;
  } else {
    clear_has_code_type();
    code_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string selfparams = 3;
inline bool C2SSendSMSCodeToPlayer::has_selfparams() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void C2SSendSMSCodeToPlayer::set_has_selfparams() {
  _has_bits_[0] |= 0x00000004u;
}
inline void C2SSendSMSCodeToPlayer::clear_has_selfparams() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void C2SSendSMSCodeToPlayer::clear_selfparams() {
  if (selfparams_ != &::google::protobuf::internal::kEmptyString) {
    selfparams_->clear();
  }
  clear_has_selfparams();
}
inline const ::std::string& C2SSendSMSCodeToPlayer::selfparams() const {
  return *selfparams_;
}
inline void C2SSendSMSCodeToPlayer::set_selfparams(const ::std::string& value) {
  set_has_selfparams();
  if (selfparams_ == &::google::protobuf::internal::kEmptyString) {
    selfparams_ = new ::std::string;
  }
  selfparams_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_selfparams(const char* value) {
  set_has_selfparams();
  if (selfparams_ == &::google::protobuf::internal::kEmptyString) {
    selfparams_ = new ::std::string;
  }
  selfparams_->assign(value);
}
inline void C2SSendSMSCodeToPlayer::set_selfparams(const char* value, size_t size) {
  set_has_selfparams();
  if (selfparams_ == &::google::protobuf::internal::kEmptyString) {
    selfparams_ = new ::std::string;
  }
  selfparams_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SSendSMSCodeToPlayer::mutable_selfparams() {
  set_has_selfparams();
  if (selfparams_ == &::google::protobuf::internal::kEmptyString) {
    selfparams_ = new ::std::string;
  }
  return selfparams_;
}
inline ::std::string* C2SSendSMSCodeToPlayer::release_selfparams() {
  clear_has_selfparams();
  if (selfparams_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = selfparams_;
    selfparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SSendSMSCodeToPlayer::set_allocated_selfparams(::std::string* selfparams) {
  if (selfparams_ != &::google::protobuf::internal::kEmptyString) {
    delete selfparams_;
  }
  if (selfparams) {
    set_has_selfparams();
    selfparams_ = selfparams;
  } else {
    clear_has_selfparams();
    selfparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SEnterGame

// required string init_user_name = 1;
inline bool C2SEnterGame::has_init_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2SEnterGame::set_has_init_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2SEnterGame::clear_has_init_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2SEnterGame::clear_init_user_name() {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    init_user_name_->clear();
  }
  clear_has_init_user_name();
}
inline const ::std::string& C2SEnterGame::init_user_name() const {
  return *init_user_name_;
}
inline void C2SEnterGame::set_init_user_name(const ::std::string& value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SEnterGame::set_init_user_name(const char* value) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(value);
}
inline void C2SEnterGame::set_init_user_name(const char* value, size_t size) {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  init_user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SEnterGame::mutable_init_user_name() {
  set_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    init_user_name_ = new ::std::string;
  }
  return init_user_name_;
}
inline ::std::string* C2SEnterGame::release_init_user_name() {
  clear_has_init_user_name();
  if (init_user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = init_user_name_;
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SEnterGame::set_allocated_init_user_name(::std::string* init_user_name) {
  if (init_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete init_user_name_;
  }
  if (init_user_name) {
    set_has_init_user_name();
    init_user_name_ = init_user_name;
  } else {
    clear_has_init_user_name();
    init_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string user_pwd = 2;
inline bool C2SEnterGame::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2SEnterGame::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2SEnterGame::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2SEnterGame::clear_user_pwd() {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    user_pwd_->clear();
  }
  clear_has_user_pwd();
}
inline const ::std::string& C2SEnterGame::user_pwd() const {
  return *user_pwd_;
}
inline void C2SEnterGame::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void C2SEnterGame::set_user_pwd(const char* value) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(value);
}
inline void C2SEnterGame::set_user_pwd(const char* value, size_t size) {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  user_pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* C2SEnterGame::mutable_user_pwd() {
  set_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    user_pwd_ = new ::std::string;
  }
  return user_pwd_;
}
inline ::std::string* C2SEnterGame::release_user_pwd() {
  clear_has_user_pwd();
  if (user_pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_pwd_;
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void C2SEnterGame::set_allocated_user_pwd(::std::string* user_pwd) {
  if (user_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete user_pwd_;
  }
  if (user_pwd) {
    set_has_user_pwd();
    user_pwd_ = user_pwd;
  } else {
    clear_has_user_pwd();
    user_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2SHeartBeat


// @@protoc_insertion_point(namespace_scope)

}  // namespace net_protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NP_5fClientServer_2eproto__INCLUDED
